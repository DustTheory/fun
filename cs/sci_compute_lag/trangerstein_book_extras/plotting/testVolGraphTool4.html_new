<html>
  <head>
    <title>VolGraphTool development testing</title>
    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
    ></script>
    <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
    <script src=LookupTable.js></script>
    <script src=VolGraphTool.js></script>
    <script src=Colormap.js></script>
    <script src=Palette.js></script>
    <script type="text/javascript">
      function f( x, y, z ) { return x * x + y * y + z * z; }
      function webGLStart() {
        var low = [ -1, -1 , -1 ];
        var high = [ 1, 1 , 1 ];
        var ncell = [ 10, 10, 10 ];
        var p = new Palette();
        var gt = new VolGraphTool( document.getElementById("webgl_canvas"),
          "volgraphtool test", p );
        gt.draw3DIsoSurfaces( f, low, high, ncell, 1 );
      }
    </script>
  </head>
  <body onload="webGLStart();">
    Plot iso-surface for \(f(x,y,z) = x^2 + y^2 + z^2\)
    in (-1,1) x (-1,1) x (-1,1)
    <br>
    <script id="shader-fs" type="x-shader/x-fragment">
      varying highp vec2 vTextureCoord;
      varying highp vec3 vLighting;
      uniform sampler2D uSampler;
      void main(void) {
        mediump vec4 texelColor = texture2D(uSampler, vec2(vTextureCoord.s,
          vTextureCoord.t));
        gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);
      }
    </script>
<!--
-->
    <script id="shader-vs" type="x-shader/x-vertex">
      attribute highp vec3 aVertexNormal;
      attribute highp vec3 aVertexPosition;
      attribute highp vec2 aTextureCoord;
      uniform highp mat4 uNormalMatrix;
      uniform highp mat4 uMVMatrix;
      uniform highp mat4 uPMatrix;
      varying highp vec2 vTextureCoord;
      varying highp vec3 vLighting;
      void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vTextureCoord = aTextureCoord;
        highp vec3 ambientLight = vec3(0.6, 0.6, 0.6);
        highp vec3 directionalLightColor = vec3(0.5, 0.5, 0.75);
        highp vec3 directionalVector = vec3(0.85, 0.8, 0.75);
        highp vec4 transformedNormal=uNormalMatrix*vec4(aVertexNormal,1.0);
        highp float directional=max(dot(transformedNormal.xyz,directionalVector),0.0);
        vLighting = ambientLight + (directionalLightColor * directional);
      } 
    </script>
    <canvas
      id="webgl_canvas"
      style="border: none;"
      width="500"
      height="500"
    ></canvas>
    <br/>
    mouse buttons: left ==> rotate, right ==> crosshairs
    <br/>
    <textarea
      id="crosshair_textarea"
      cols=100
      rows=1
    >
    </textarea>
    <br/>
    <textarea
      id="debug_textarea"
      cols=100
      rows=50
    >
    </textarea>
<!--
-->
  </body>
</html> 

