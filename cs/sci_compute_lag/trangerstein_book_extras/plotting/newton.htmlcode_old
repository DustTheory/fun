\begin{html}
<HTML>
  <HEAD>
    <meta charset="UTF-8">
    <TITLE> Newton method </TITLE>
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
    ></script>
  </HEAD>
  <BODY>
    <hr>
    <h2>
      Newton's method to find a zero of a function
    </h2>
    <script src=XYGraphTool.js></script>
    <script language="javascript">
      var npts = 100;
      var A = -4;
      var B = 4;
//    var A = - Math.PI * .5;
//    var B = Math.PI * .5;
      var soln = undefined;
      var gt = undefined;
      var xarray = new Array( npts + 1 );
      var farray = new Array( npts + 1 );

      function f( x ) { return x * x - 4 * Math.sin( x ); }
      function fp( x ) { return 2* x - 4 * Math.cos( x ); }
//    function f( x ) { return Math.sin( 2 * x ) - x; }
//    function fp( x ) { return 2 * Math.cos( 2 * x ) - 1; }

      function computePlotPoints( a, b ) {
        var dx = ( b - a ) * 0.0625;
        a -= dx;
        b += dx;
        dx = ( b - a ) / npts;
        var fmax = f( a ); 
        var fmin = fmax; 
        xarray[ 0 ] = a;
        farray[ 0 ] = fmax;
        for ( var i = 1; i <= npts; i ++ ) {
          xarray[ i ] = xarray[ i - 1 ] + dx;
          farray[ i ] = f( xarray[ i ] );
          fmin = Math.min( fmin, farray[ i ] );
          fmax = Math.max( fmax, farray[ i ] );
        }
        return {
          flo : fmin,
          fhi : fmax
        }
      }

      function plotPoints( ) {
        gt.beginDrawing();
          gt.movePen( xarray[ 0 ], farray[ 0 ] );
          for ( var i = 1; i < xarray.length; i ++ ) {
            gt.drawLine( xarray[ i ], farray[ i ] );
          }
        gt.endDrawing();
      }

      function plotTangentLine( x, fx, fpx ) {
        if ( Math.abs( fpx ) > 0 ) {
          var tangentY_at_xlo = fx - fpx * ( x - gt.user_xlo );
          var tangentY_at_xhi = fx + fpx * ( gt.user_xhi - x );
          tangentX_at_ylo = x - ( fx - gt.user_ylo ) / fpx;
          tangentX_at_yhi = x + ( gt.user_yhi - fx ) / fpx;
          if ( gt.user_ylo <= tangentY_at_xlo &&
          tangentY_at_xlo <= gt.user_yhi ) {
            if ( gt.user_xlo <= tangentX_at_ylo &&
            tangentX_at_ylo <= gt.user_xhi ) {
              gt.beginDrawing();
                gt.movePen( gt.user_xlo, tangentY_at_xlo );
                gt.drawLine( tangentX_at_ylo, gt.user_ylo );
              gt.endDrawing();
            } else {
              if ( gt.user_ylo <= tangentY_at_xhi &&
              tangentY_at_xhi <= gt.user_yhi ) {
                gt.beginDrawing();
                  gt.movePen( gt.user_xlo, tangentY_at_xlo );
                  gt.drawLine( gt.user_xhi, tangentY_at_xhi );
                gt.endDrawing();
              } else if ( gt.user_xlo <= tangentX_at_yhi &&
              tangentX_at_yhi <= gt.user_xhi ) {
                gt.beginDrawing();
                  gt.movePen( gt.user_xlo, tangentY_at_xlo );
                  gt.drawLine( tangentX_at_yhi, gt.user_yhi );
                gt.endDrawing();
              }
            }
          } else if ( gt.user_xlo <= tangentX_at_ylo &&
          tangentX_at_ylo <= gt.user_xhi ) {
            if ( gt.user_ylo <= tangentY_at_xhi &&
            tangentY_at_xhi <= gt.user_yhi ) {
              gt.beginDrawing();
                gt.movePen( tangentX_at_ylo, gt.user_ylo );
                gt.drawLine( gt.user_xhi, tangentY_at_xhi );
              gt.endDrawing();
            } else if ( gt.user_xlo <= tangentX_at_yhi &&
            tangentX_at_yhi <= gt.user_xhi ) {
              gt.beginDrawing();
                gt.movePen( tangentX_at_ylo, gt.user_ylo );
                gt.drawLine( tangentX_at_yhi, gt.user_yhi );
              gt.endDrawing();
            }
          } else if ( gt.user_ylo <= tangentY_at_xhi &&
          tangentY_at_xhi <= gt.user_yhi ) {
            if ( gt.user_xlo <= tangentX_at_yhi &&
            tangentX_at_yhi <= gt.user_xhi ) {
              gt.beginDrawing();
                gt.movePen( gt.user_xhi, tangentY_at_xhi );
                gt.drawLine( tangentX_at_yhi, gt.user_yhi );
              gt.endDrawing();
            }
          }
        } else {
          if ( gt.user_ylo <= fx && fx <= gt.user_yhi ) {
            gt.beginDrawing();
              gt.movePen( gt.user_xlo, fx );
              gt.drawLine( gt.user_xhi, fx );
            gt.endDrawing();
          }
        }
      }

      function onStart() {
        document.getElementById("debug_textarea").value = "";
//      document.getElementById("debug_textarea").value +=
//        "entering onStart\n";
        var fbounds = computePlotPoints( A, B );
        gt = new XYGraphTool( document.getElementById("newton_canvas"),
          "newton method", "x", "f ", A, B, fbounds.flo, fbounds.fhi );
        gt.setBgColor( "white" );
        gt.newPage();
        gt.setFgColor( "black" );
        gt.drawBoundingBox();
        gt.drawAxes();
        gt.setFgColor( "blue" );
        plotPoints( );
        gt.mouseUp = firstNewtonIteration;
        gt.watchMouse();
        gt.listen();
//      document.getElementById("debug_textarea").value +=
//        "leaving onStart\n";
      }

      function firstNewtonIteration( e ) {
//      document.getElementById("debug_textarea").value +=
//        "entering firstNewtonIteration, mouseX,Y = "
//        + gt.mouseX + " " + gt.mouseY + "\n";
        soln = gt.mouseX;
        newtonIteration();
//      document.getElementById("debug_textarea").value +=
//        "leaving firstNewtonIteration\n";
      }

      function newtonIteration() {
//      document.getElementById("debug_textarea").value +=
//        "entering newtonIteration\n";
        gt.setBgColor( "white" );
        gt.newPage();
        gt.setFgColor( "black" );
        gt.drawBoundingBox();
        gt.drawAxes();
        gt.setFgColor( "blue" );
        plotPoints( );
        var fs = f( soln );
        var fps = fp( soln );
        gt.setFgColor( "red" );
        plotTangentLine( soln, fs, fps );
        gt.setFgColor( "green" );
        gt.drawCross( soln, fs );
        var solnold=soln
        soln -= fs / fps;
        if (soln==solnold) {
          document.getElementById("debug_textarea").value =
            "no change\n current guess = " + soln
            + " f(current guess) = " + f(soln) + "\n";
        } else {
          document.getElementById("debug_textarea").value =
            "current guess = " + soln
            + " f(current guess) = " + f(soln) +"\n";
        }
//      document.getElementById("debug_textarea").value +=
//        "leaving newtonIteration\n";
      }
    </script>
    Click mouse in drawing area to select initial guess for Newton iteration
    <br>
    <input
      type="button"
      value="Perform another Newton iteration"
      onclick="newtonIteration();"
    >
    <input
      type="button"
      value="Restart Newton iteration from the beginning"
      onclick="onStart();"
    >
    <br>
    <canvas id="newton_canvas" width="500" height="300">
      Apparently, your browser does not support the HTML5
      <code>&lt;canvas&gt;</code> element
    </canvas>
    <br>
    <textarea
      id="debug_textarea"
      cols=100
      rows=5
    >
    </textarea>
    <script language="javascript"> XYGraphTool.onload("newton_canvas");onStart(); </script>
    <hr>
  </BODY>
</HTML>
\end{html}
